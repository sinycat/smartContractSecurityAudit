import express from 'express';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { marked } from 'marked';
import puppeteer from 'puppeteer';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3000;

app.use(express.json({ limit: '2mb' }));
app.use(express.urlencoded({ extended: true, limit: '2mb' }));

function getCurrentTimeString() {
    const now = new Date();
    const yyyy = now.getFullYear();
    const mm = String(now.getMonth() + 1).padStart(2, '0');
    const dd = String(now.getDate()).padStart(2, '0');
    const hh = String(now.getHours()).padStart(2, '0');
    const min = String(now.getMinutes()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}`;
}

marked.setOptions({
    gfm: true,
    breaks: true,
    headerIds: true,
    mangle: false,
    sanitize: false,
    smartLists: true,
    smartypants: true,
    xhtml: false
});

app.post('/api/generate-pdf', async (req, res) => {
    try {
        const { markdown, fileName } = req.body;
        if (!markdown) {
            return res.status(400).json({ error: 'Missing markdown content' });
        }
        const pdfFileName = (fileName || 'report') + '.pdf';
        const htmlContent = marked.parse(markdown);
        const fullHtml = `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Markdown to PDF</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        line-height: 1.6;
                        margin: 40px;
                        color: #333;
                    }
                    h1 { color: #000; font-size: 28px; }
                    h2 { color: #1b7a70; font-size: 24px; }
                    h3 { color: #333; font-size: 20px; }
                    p { margin: 10px 0; }
                    code {
                        background: #f5f5f5;
                        padding: 2px 4px;
                        border-radius: 3px;
                        font-family: monospace;
                    }
                    pre {
                        background: #f5f5f5;
                        padding: 10px;
                        border-radius: 5px;
                        overflow-x: auto;
                    }
                    blockquote {
                        border-left: 4px solid #2DD4BF;
                        padding-left: 10px;
                        color: #555;
                        background: #f9f9f9;
                        margin: 10px 0;
                    }
                    table {
                        border-collapse: collapse;
                        width: 100%;
                        margin: 15px 0;
                    }
                    th, td {
                        border: 1px solid #ddd;
                        padding: 8px;
                        text-align: left;
                    }
                    th {
                        background-color: #f5f5f5;
                    }
                </style>
            </head>
            <body>
                ${htmlContent}
            </body>
            </html>
        `;

        const browser = await puppeteer.launch({
            headless: 'new',
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu'
            ]
        });
        const page = await browser.newPage();
        await page.setContent(fullHtml, { waitUntil: 'networkidle0' });
        const timeStr = getCurrentTimeString();
        const pdfBuffer = await page.pdf({
            format: 'A4',
            margin: {
                top: '30mm',
                right: '20mm',
                bottom: '20mm',
                left: '20mm'
            },
            printBackground: true,
            displayHeaderFooter: true,
            headerTemplate: `
                <div style="width:100%; font-size:10px; color:#888; padding:0 10px; box-sizing:border-box;">
                  <span style="float:left;">Generated By AuditX</span>
                  <span style="float:right;">${timeStr}</span>
                </div>
            `,
            footerTemplate: `
                <div style="width:100%; text-align:center; font-size:10px; color:#888;">
                  Page <span class="pageNumber"></span> of <span class="totalPages"></span>
                </div>
            `
        });
        await browser.close();
        res.set({
            'Content-Type': 'application/pdf',
            'Content-Disposition': `attachment; filename="${pdfFileName}"`
        });
        res.send(pdfBuffer);
    } catch (err) {
        console.error('PDF生成失败:', err);
        res.status(500).json({ error: 'PDF generation failed', detail: err.message });
    }
});

app.listen(PORT, () => {
    console.log(`PDF API server running at http://localhost:${PORT}`);
}); 